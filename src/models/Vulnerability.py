import uuid
import datetime
from src.common.Database import Database
#from src.models.Project import Project

__author__ = 'RivaSecurity'


class Vulnerability(object):
    def __init__(self, report_id, name, status, severity, exploitability, owaspTop10, description, risk, remediation,
                 references, comments, poc, pocImage, _id=None):
        self.report_id = report_id
        self.name = name
        self.status = status
        self.severity = severity
        self.exploitability = exploitability
        self.owaspTop10 = owaspTop10
        self.description = description
        self.risk = risk
        self.remediation = remediation
        self.references = references
        self.poc = poc
        self.pocImage = pocImage
        self.comments = comments
        self._id = uuid.uuid4().hex if _id is None else _id


#find one vulnerability
    @classmethod
    def getVulnerability(cls, id):
        vuln = Database.find_one(collection="vulnerabilities",  query={'_id': id})

        if vuln != None:
            return vuln
        else:
            return False

#find all vulnerabilities of on project given project id
    @classmethod
    def getVulnerabilities(cls, report_id):
        vulns = Database.find(collection="vulnerabilities", query={'report_id': report_id})

        critical = []
        high = []
        medium = []
        low = []
        info = []

        if vulns != None:
            for vuln in vulns:
                if vuln["severity"] == "critical":
                    critical.append(vuln)
                elif vuln["severity"] == "high":
                    high.append(vuln)
                elif vuln["severity"] == "medium":
                    medium.append(vuln)
                elif vuln["severity"] == "low":
                    low.append(vuln)
                elif vuln["severity"] == "info":
                    info.append(vuln)

        if vulns != None:
            return critical+high+medium+low+info
        else:
            return False
#add vulnerability
    def addVulnerability(self):
        Database.insert(collection='vulnerabilities',
                        data=self.json())
#update Vulnerability
    @classmethod
    def editVulnerability(cls, id, newObj):
        vulnerability = Database.find_one(collection='vulnerabilities', query={'_id': id})
        #print(vulnerability)
        if vulnerability != None:  # edit if element exists
            vulnerability = Database.update_one(collection='vulnerabilities', obj=vulnerability, newObj={"$set": newObj})
            return True
        else:
            return False


#delete on vulnerability
    @classmethod
    def deleteVulnerability(cls, id):
        vuln = Database.find_one(collection='vulnerabilities', query={'_id': id})
        if vuln != None:  # edit if element exists
            Database.delete_one(collection='vulnerabilities', query={"_id": id})
            return True
        else:
            return False


#delete all vulnerabilities of on project given project id
    @classmethod
    def deleteVulnerabilitiesOfProject(cls, report_id):
        vuln = Database.find(collection='vulnerabilities', query={'report_id': report_id})
        if vuln != None:  # edit if element exists
            print(Database.delete_many(collection='vulnerabilities', query={"report_id": report_id}))
            return True
        else:
            return False


#get vulnerabilities severities
    @classmethod
    def getVulnerabilitiesSeverities(cls, report_id):
        critical = high = medium = low = info = 0
        vulns = Database.find(collection="vulnerabilities", query={'report_id': report_id})
        if vulns != None:
            for vuln in vulns:
                if vuln["severity"]=="critical":
                    critical = critical+1
                elif vuln["severity"] == "high":
                    high = high+1
                elif vuln["severity"] == "medium":
                    medium = medium+1
                elif vuln["severity"] == "low":
                    low = low+1
                elif vuln["severity"] == "info":
                    info = info+1
            return [critical,high,medium,low,info]
        else:
            return False

#get number of vulnerabilities for a project
    @classmethod
    def getVulnerabilitiesNumber(cls, report_id):
        vulns = Database.find(collection="vulnerabilities", query={'report_id': report_id})
        if vulns != None:
            return vulns.count()
        else:
            return 0

    def addImage(image, filename):
        return Database.saveFile(image=image, filename=filename)

    def getImage(filename):
        return Database.getFileByName(filename=filename)

    def json(self):
        return{
           "_id": self._id,
           "report_id": self.report_id,
           "name": self.name,
            "status": self.status,
            "severity": self.severity,
            "poc": self.poc,
            "pocImage": self.pocImage,
            "exploitability": self.exploitability,
            "owaspTop10": self.owaspTop10,
            "description": self.description,
            "risk": self.risk,
            "references": self.references,
            "remediation": self.remediation,
            "comments": self.comments
        }